Git credentials:
	username: gojicmiroslav
	password: deronje777

Push grane(koja nije master) na Git:
	git push -u origin static-pages

Ponistavanje svih promena i vracanje na zadnji commit:
	git checkout -f

Format naslova stranice(title):
	About | Mg Social Site	

U Rubiju je ovo isto:
	%w[A B C].map {|char| char.downcase}
	%w[A B C].map(&:downcase)

	h1 = { :first_name => "Misa", :last_name => "Gojic"}
	# first_name i last_name tehnicki nisu simboli, ali se konvertuju u simbole
	h2 = { first_name: "Misa", last_name: "Gojic"}

Primeri za Hesh params:
	params = {}
	params[:user] = { first_name: "Misa", last_name: "Gojic" }
	params[:user][:first_name] # Misa

Inspect
	puts user.inspect	
	# isto sto
	p user	

Lokacija za slike: app/assets/images	

Prikazivanje debug podataka:
	- u layout/application.html.erb dodati
				<%= debug(params) if Rails.env.development? %>

Podesavanje named routa u routes.rb
			get 'help' => 'static_pages#help'	
	-	sada imamo helper: help_path

Metode za update:
	user.update_attributes(name: "dsd", email: "dsds")
	user.update_attribute(name: "dsd")

Kopiranje Devise views u nasu app:
	rails g devise:views

Kako omoguciti menjanje view u Devise:
	- u config/initializers.devise.rb podesiti	
				config.scoped_views = true

Komanda za debuger: debugger

Resetovanje baze: rake db:migrate:reset

Popunjavanje baze sa podacima iz db.seeds.rb: rake db:seed

Kreiranje Devise kontrolera:
	rails g controller registrations
	rails g controller sessions

LINKOVI:
	https://github.com/eliotsykes/rspec-rails-examples
	https://github.com/RailsApps/rails-devise/tree/master/spec
	https://github.com/plataformatec/devise/wiki
	https://github.com/plataformatec/devise
	https://github.com/jnicklas/capybara	
	https://github.com/bmabey/email-spec

Dodavanje bootstrap js - u app/assets/javascripts/application.js dodati
	//= require jquery
	//= require jquery_ujs
	//= require bootstrap
	//= require turbolinks
	//= require_tree .


Debug:
	print page.html
	save_and_open_page
	save_and_open_screenshot
	page.save_screenshot('screenshot.png')
	screenshot_and_save_page

TODO:
	- refaktorisati hijerarhiju rspec - helperi i ostalo	

Friendly forwarding - u sesiju upisati 
	session[:fowrarding_url] = request.url if request.get?

Identifying administrators
	if current_user.admin?
  	# do something
	end

If the page could potentially not have a current_user set then:
	if current_user.try(:admin?)
  	# do something
	end	

The code below can be used to grant admin status to the current user.
		current_user.update_attribute :admin, true
		current_user.toggle!(:admin)

Posle Sign Up, a pre Confirmation na Home stranici se pojavljuje poruka:
	<div class="alert alert-warning" role="alert">
	A message with a confirmation link has been sent to your email address. Please follow the link to activate your account.
	</div>

Posle uspesne potvrde na Home stranici se pojavljuje poruka:
	<div class="alert alert-success" role="alert">
		Your email address has been successfully confirmed.
	</div>	

ADVICE - run test suite before deploy on remote server

Kreiranje Micropost modela:
	- rails g model Micropost content:text user:references
	- user:references - kazemo Railsu da je ovo strani kljuc(moze i user_id:integer)
	- ova naredba kreira: model, migraciju ,test, factories
	- izvrsavanje migracije: rake db:migrate

MULTIPLE KEY INDEX	
 	- u migraciji
	 			add_index :microposts, [:user_id, :created_at]

 	Any index can give benefit by allowing a query to narrow down the set of rows to examine.
	A multi-column index can help when your query includes conditions on those multiple columns.
	For example:
			SELECT * FROM Mytable WHERE user_id = 123 AND created_at > '2013-02-01'

	The multi-column index narrows down to the subset of rows that are associated with user_id 123, then within that subset, it further narrows down the selection to those with a recent created_at value.

	Without the second column in the index, the RDBMS would have to load all the rows for user_id 123 into memory before it could determine if they pass the criteria.		

ASSOCATIONS

MICROPOST  ==> belongs_to  					 		  has_many <====== USER
-------------------------    							---------------------
id       integer	 						------->    id integer
content  text									|
user_id  integer 	<-----------|	

 micopost.user    ====================>   user
 micropost        <====================   user.microposts

This associations gives us useful methodes:
		- micropost.user  					     - returns the User objectassociated with the micropost
		- user.microposts 					     - returns a collection of the user's microposts
		- user.microposts.create(arg)    - creates a micropost associated with the user 
		- user.microposts.create!(arg)   - creates a micropost associated with the user 
																		   (exception on failure)
		- user.microposts.build(arg)     - return a new Micropost object associated with user
																			 (it doesn't create in database, it creates in memory, analog of  
																			 new)	
		- user.microposts.find_by(id: 1) - finds the micropost with id: 1 and user_id equal to user.id

MACRO - default_scope(scope = nil) 
	Use this macro in your model to set a default scope for all operations on the model.

	class Article < ActiveRecord::Base
	  default_scope { where(published: true) }
	end

	Article.all # => SELECT * FROM articles WHERE published = true


COUNT vs LENGTH
 - count vraca broj torki iz baze, length vraca broj elemenata kolekcije
 - PR.
 	@user.count - broj iz baze
 	@user.microposts.count - iz baze	

RENDER nesto
	Ovaj kod(u shared/feed.html.erb):
		<%= render @feed_items %>
	radi zato sto Rails trzi klasu od @feed_items, a to je Micropost.Zatim trazi partial
	u view/micropost/micropost.html.erb	
	Ime varijable nije bitno, bitna je klasa varijable.

REQUEST.REFERRER
	request.referrer - returns a full url string.For example:
			http://www.google.com/adsense
  We can use Ruby's URI Module to wrap it and then simply ask it for its path:
		 if URI(request.referer).path == '/adsense'
	returns: '/adsense'

CARRIERWAVE	
	- rails g uploader Picture
	- rails g migration add_picture_to_microposts picture:string
	- rake db:migrate
	- Mount uploader(micropost.rb):
	 		class Micropost < ActiveRecord::Base
	 			mount_uploader :picture, PictureUploader
	 		end
	- Dodati u micropost_form
			<%= form_for(@micropost, html: { multipart: true }) do |f| %>
		i 	
			<span class="picture">
				<%= f.file_field :picture, accept: 'image/jpeg,image/gif,image/png' %>
			</span>	
	- RESTARTOVATI SERVER	
	- Dodati u micropost_controller
		def micropost_params
			params.require(:micropost).permit(:content, :picture)
		end
	- Securing uploads - picture_uploader.rb:
		def extension_white_list
    	%w(jpg jpeg gif png)
  	end
  - In micropost model dodajemo custom validaciju	
  - Resize images - MiniMagick
  	- u picture_uploader.rb dodajemo
  		class PictureUploader < CarrierWave::Uploader::Base
  			include CarrierWave::MiniMagick
  			process resize_to_fill: [400, 400]
			end

CUSTOM VALIDATOR IN MODEL
	- validate :method_name
	- Example:
			class Invoice < ActiveRecord::Base
			  validate :expiration_date_cannot_be_in_the_past,
			    :discount_cannot_be_greater_than_total_value
			 
			  def expiration_date_cannot_be_in_the_past
			    if expiration_date.present? && expiration_date < Date.today
			      errors.add(:expiration_date, "can't be in the past")
			    end
			  end
			 
			  def discount_cannot_be_greater_than_total_value
			    if discount > total_value
			      errors.add(:discount, "can't be greater than total value")
			    end
			  end
			end

		By default such validations will run every time you call valid?. It is also possible to control when to run these custom validations by giving an :on option to the validate method, with either: :create or :update.
		Example:
			class Invoice < ActiveRecord::Base
			  validate :active_customer, on: :create
			 
			  def active_customer
			    errors.add(:customer_id, "is not active") unless customer.active?
			  end
			end

IMAGE MAGICK - SOLUTION FOR INSTALL			
	- link: http://stackoverflow.com/questions/30119781/gem-install-rmagick-error
	- post:
			- Remove your current ImageMagic folder and rmagick gem
			- install from http://ftp.sunet.se/pub/multimedia/graphics/ImageMagick/binaries/ the ImageMagick-6.7.9-3 Q16-windows-dll.exe and ImageMagick-6.7.9-2-Q8-windows-static.exe in the same folder (these worked while the most recent ones don't)
			- in your console window set path=d:\ImageMagick;%path%
			- gem install rmagick -- '--with-opt-dir="d:\ImageMagick"'
			I installed ImageMagick obviously in d:\ImageMagick, so adapt for your situation. This worked for my Ruby 1.9.3 under Windows 7, success !

ENVIRONMENT
	- Povera koji je evironment
		- if Rails.env.production?

FOLLOWING
	- user.following - korisnici koje mi pratimo
	- user.followers - korisnici koji nas prate

	Koraci:
		- generisemo model:
				rails g model Relationship follower_id:integer followed_id:integer		


ASSOCIATION - FOLLOWER <-> FOLLOWED				

	class User < ActiveRecord::Base
		...
		has_many :active_relationships, class_name: "Relationship", foreign_key: "follower_id", dependent: :destroy
		...
	end

	class Relationship < ActiveRecord::Base
		belongs_to :follower, class_name: "User"
		belongs_to :followed, class_name: "User"
	end

	Metode:
		- active_relationships.follower - return the follower 
		- active_relationships.followed - returns the followed user
		- active_relationships.create(followed_id: user.id) - create an active_relationships associated with user
		- active_relationships.create!(followed_id: user.id) - create an active_relationships associated with user
																													(exception on failure)
		- active_relationships.build(followed_id: user.id) - returns a new Relationships object associated with 
																												 user																																

HAS_MANY - :source
	The :source option specifies the source association name for a has_many :through association. You only need to use this option if the name of the source association cannot be automatically inferred from the association name.
 	It is a column name on "through" table		


LINK - http://localhost:3000/users/1/following 	

AJAX
	- form_for is a helper that assists with writing forms. form_for takes a :remote option. It works like this:
		<%= form_for(@article, remote: true) do |f| %>
		  ...
		<% end %>				
	This will generate the following HTML:
		<form accept-charset="UTF-8" action="/articles" class="new_article" data-remote="true" id="new_article" method="post">
	  ...
		</form>			
	Note the data-remote="true". Now, the form will be submitted by Ajax rather than by the browser's normal submit mechanism.
	
	Now we have rearange for relationships controller to respond to AJAX.																					def create
				user = User.find(params[:followed_id])
				current_user.follow(user)
				
				respond_to do |format|
					format.html { redirect_to user}
					format.js {}
				end
			end

	Notice the format.js in the respond_to block; that allows the controller to respond to your Ajax request. You then have a corresponding app/views/users/create.js.erb view file that generates the actual JavaScript code that will be sent and executed on the client side.		

PROBLEM - ukoliko iskljucimo java script u browseru, moramo dodati u config/application.eb
		# Include the authenticity token in remote form(AJAX).
    config.action_view.embed_authenticity_token_in_remote_forms = true	

FEED
	user = User.first
	user.following.map(&:id) # uzimamo sve id

	Rails ovo obezbedjuje out-of-the-box
		user.following_ids


PRACENJE LOGA iz KONZOLE
	tail -f log/test.log

CUSTOM ROUTE IN DEVISE
	devise_scope :user do
    # as: :login -> named route, now we can use register_path
    get "login", to: "devise/sessions#new", as: :login 
    get "register", to: "devise/registrations#new", as: :register
  end

PRETEND FLAG -p
	- pregled sta ce se sve generisati sa komandom, bez generisanja.
	Primer:
			rails g model myModel -p  

==========================================================================================================

nastaviti - 01:47
http://rails-3-2.railstutorial.org/book
(01:53 - lesson 11 - Image Production in production)

TODO:
	1. TODO: ubaciti I18n Message - TEST
	2. popraviti(lession 11 - 01:19), dodati prikaz(feed) postova u slucaju unosa praznog posta.
		 Trenutno se prikazuje prazan niz @feed_items = []. Treba da se prikazu postovi trenutnog korisnika
		 Problem pravi will_paginate, kada se klikne na page=2
	3. Dodati dugme za dodavanje jos slika za POST - Add New Image, tako da post moze da sadrzi vise slika.
	4. Dodati OmniAuth logovanje	
	5. Napraviti JS slide za background images 
	6. Dodati features: SEARCH 

